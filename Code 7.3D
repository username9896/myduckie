#!/usr/bin/env python3

import rospy
from duckietown_msgs.msg import Twist2DStamped, AprilTagDetectionArray

class TargetFollower:
    def __init__(self):
        # Initialize the ROS node
        rospy.init_node('target_follower_node', anonymous=True)

        # Register the shutdown hook
        rospy.on_shutdown(self.clean_shutdown)

        # Set up the publisher and subscriber for the robot
        self.cmd_vel_pub = rospy.Publisher('/shravel/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        rospy.Subscriber('/shravel/apriltag_detector_node/detections', AprilTagDetectionArray, self.tag_callback, queue_size=1)
        
        rospy.spin() # Keep the node running and listening for messages

    def clean_shutdown(self):
        # Ensure the robot stops before the node shuts down
        rospy.loginfo("System shutting down. Stopping robot...")
        self.stop_robot()

    def stop_robot(self):
        # Send a stop command to the robot
        cmd_msg = Twist2DStamped()
        cmd_msg.header.stamp = rospy.Time.now()
        cmd_msg.v = 0.0
        cmd_msg.omega = 0.0
        self.cmd_vel_pub.publish(cmd_msg)

    def tag_callback(self, msg):
        # Callback for AprilTag detections
        self.move_robot(msg.detections)

    def move_robot(self, detections):
        if len(detections) == 2:
            x1, y1, z1 = detections[0].transform.translation.x, detections[0].transform.translation.y, detections[0].transform.translation.z
            rospy.loginfo("Sign 1 - x, y, z: %f, %f, %f", x1, y1, z1)
            x2, y2, z2 = detections[1].transform.translation.x, detections[1].transform.translation.y, detections[1].transform.translation.z
            rospy.loginfo("Sign 2 - x, y, z: %f, %f, %f", x2, y2, z2)

            rospy.sleep(1)

            x, z = (x1, z1) if z1 < z2 else (x2, z2)

            cmd_msg = Twist2DStamped()
            cmd_msg.header.stamp = rospy.Time.now()

            if z > 0.15:
                cmd_msg.v = 0.2
                cmd_msg.omega = 0.0
                self.cmd_vel_pub.publish(cmd_msg)
                rospy.sleep(0.2)
                self.stop_robot()

            elif z < 0.10:
                cmd_msg.v = -0.2
                cmd_msg.omega = 0.0
                self.cmd_vel_pub.publish(cmd_msg)
                rospy.sleep(0.2)
                self.stop_robot()

            elif x > 0.05:
                cmd_msg.v = 0.0
                cmd_msg.omega = -0.2
                self.cmd_vel_pub.publish(cmd_msg)
                rospy.sleep(0.2)
                self.stop_robot()

            elif x < -0.05:
                cmd_msg.v = 0.0
                cmd_msg.omega = 0.2
                self.cmd_vel_pub.publish(cmd_msg)
                rospy.sleep(0.2)
                self.stop_robot()
                
        else:
            self.stop_robot()

if __name__ == '__main__':
    try:
        target_follower = TargetFollower()
    except rospy.ROSInterruptException:
        pass
