#!/usr/bin/env python3

import rospy
from duckietown_msgs.msg import Twist2DStamped, FSMState, AprilTagDetectionArray, WheelEncoderStamped
from sensor_msgs.msg import Range

class Autopilot:F
    def __init__(self):
        # Initialize ROS node
        rospy.init_node('autopilot_node', anonymous=True)
        self.cmd_msg = Twist2DStamped()
        self.tick_count = 0
        self.front_distance = 0
        self.robot_state = "LANE_FOLLOWING"

        # Set up clean shutdown behavior
        rospy.on_shutdown(self.clean_shutdown)
        
        # Initialize publishers and subscribers
        self.cmd_vel_pub = rospy.Publisher('/duckie/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        self.state_pub = rospy.Publisher('/duckie/fsm_node/mode', FSMState, queue_size=1)
        self.pub = rospy.Publisher('/duckie/car_cmd_switch_node/cmd', Twist2DStamped, queue_size=1)
        rospy.Subscriber('/duckie/apriltag_detector_node/detections', AprilTagDetectionArray, self.tag_callback, queue_size=1)
        rospy.Subscriber('/duckie/left_wheel_encoder_node/tick', WheelEncoderStamped, self.encoder_callback, queue_size=1)
        rospy.Subscriber('/duckie/front_center_tof_driver_node/range', Range, self.range_callback, queue_size=1)

        # Keep the node running and listening for messages
        rospy.spin()

    # AprilTag detection callback
    def tag_callback(self, msg):
        if self.robot_state != "LANE_FOLLOWING":
            return
        
        self.move_robot(msg.detections)
 
    # Stop the robot before shutting down
    def clean_shutdown(self):
        rospy.loginfo("System shutting down. Stopping robot...")
        self.stop_robot()

    # Wheel encoder callback
    def encoder_callback(self, msg):
        self.tick_count = msg.data

    # Range sensor callback
    def range_callback(self, msg):
        self.front_distance = msg.range

    # Move the robot forward a certain distance
    def goal_distance(self, distance, linear_speed):
        initial_tick = self.tick_count
        while abs(initial_tick - self.tick_count) < (distance * 100):
            self.cmd_msg.header.stamp = rospy.Time.now()
            self.cmd_msg.v = linear_speed
            self.cmd_msg.omega = 0.0
            self.pub.publish(self.cmd_msg)
            rospy.loginfo("Moving forward...")
        self.stop_robot()

    # Rotate the robot by a certain angle
    def goal_angle(self, angle, angular_speed):
        initial_tick = self.tick_count
        while abs(self.tick_count - initial_tick) < (angle * 25):
            self.cmd_msg.header.stamp = rospy.Time.now()
            self.cmd_msg.v = 0.0
            self.cmd_msg.omega = angular_speed
            self.pub.publish(self.cmd_msg)
            rospy.loginfo("Rotating...")
        self.stop_robot()

    # Stop the robot by sending zero velocity
    def stop_robot(self):
        cmd_msg = Twist2DStamped()
        cmd_msg.header.stamp = rospy.Time.now()
        cmd_msg.v = 0.0
        cmd_msg.omega = 0.0
        self.cmd_vel_pub.publish(cmd_msg)

    # Set the robot's state
    def set_state(self, state):
        self.robot_state = state
        state_msg = FSMState()
        state_msg.header.stamp = rospy.Time.now()
        state_msg.state = self.robot_state
        self.state_pub.publish(state_msg)

    # Move the robot based on detected AprilTags
    def move_robot(self, detections):
        if len(detections) == 0:
            return

        detection = detections[0]
        tag_id = detection.tag_id
        distance_z = detection.transform.translation.z
        rospy.loginfo(distance_z)

        # Handle intersection signs
        if tag_id in [10, 11] and distance_z < 0.3:
            rospy.loginfo("STOP")
            rospy.sleep(1)
            self.set_state("NORMAL_JOYSTICK_CONTROL")
            rospy.sleep(1)
            self.goal_distance(2, 1)
            self.stop_robot()
            rospy.sleep(1)
            angular_speed = 4 if tag_id == 11 else -4
            self.goal_angle(0.5, angular_speed)
            self.stop_robot()
            rospy.sleep(1)
            self.goal_distance(2, 1)
            self.set_state("LANE_FOLLOWING")

if __name__ == '__main__':
    try:
        autopilot_instance = Autopilot()
    except rospy.ROSInterruptException:
        pass
